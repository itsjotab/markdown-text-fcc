{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/itsjotab/Desktop/FCC-projects/markdown-text/markdown-text-fcc/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/itsjotab/Desktop/FCC-projects/markdown-text/markdown-text-fcc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/itsjotab/Desktop/FCC-projects/markdown-text/markdown-text-fcc/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/itsjotab/Desktop/FCC-projects/markdown-text/markdown-text-fcc/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\n/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nvar defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = /[&<>\"']/g;\nvar escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nvar escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\n\nfunction _escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n/**\n * @param {string} html\n */\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nvar caret = /(^|[^\\[])\\^/g;\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\n\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  var obj = {\n    replace: function replace(name, val) {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    var prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n/**\n * @param {string} base\n * @param {string} href\n */\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  var relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nvar noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n    var escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') {\n      escaped = !escaped;\n    }\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n      cells = row.split(/ \\|/);\n  var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) {\n      cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\n\n\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  var suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  var l = str.length;\n  var level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n} // copied from https://stackoverflow.com/a/5450113/806777\n\n/**\n * @param {string} pattern\n * @param {number} count\n */\n\n\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n\n    count >>= 1;\n    pattern += pattern;\n  }\n\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  var href = link.href;\n  var title = link.title ? _escape(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: _escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n        indentInNode = _matchIndentInNode[0];\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(options) {\n    _classCallCheck(this, Tokenizer);\n\n    this.options = options || defaults;\n  }\n\n  _createClass(Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim() : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n\n      if (cap) {\n        var text = cap[2].trim(); // remove trailing #s\n\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, '#');\n\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n\n        var token = {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n\n      if (cap) {\n        var text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          tokens: this.lexer.blockTokens(text, []),\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var cap = this.rules.block.list.exec(src);\n\n      if (cap) {\n        var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        } // Get next list item\n\n\n        var itemRegex = new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\")); // Check if current bullet point can start a new List Item\n\n        while (src) {\n          endEarly = false;\n\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n\n          raw = cap[0];\n          src = src.substring(raw.length);\n          line = cap[2].split('\\n', 1)[0];\n          nextLine = src.split('\\n', 1)[0];\n\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimLeft();\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n\n          blankLine = false;\n\n          if (!line && /^ *$/.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n\n          if (!endEarly) {\n            var nextBulletRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))\"));\n            var hrRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n            var fencesBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n            var headingBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\")); // Check if following lines should be included in List Item\n\n            while (src) {\n              rawLine = src.split('\\n', 1)[0];\n              line = rawLine; // Re-align to follow commonmark nesting rules\n\n              if (this.options.pedantic) {\n                line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n              } // End list item if found code fences\n\n\n              if (fencesBeginRegex.test(line)) {\n                break;\n              } // End list item if found start of new heading\n\n\n              if (headingBeginRegex.test(line)) {\n                break;\n              } // End list item if found start of new bullet\n\n\n              if (nextBulletRegex.test(line)) {\n                break;\n              } // Horizontal rule found\n\n\n              if (hrRegex.test(src)) {\n                break;\n              }\n\n              if (line.search(/[^ ]/) >= indent || !line.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + line.slice(indent);\n              } else if (!blankLine) {\n                // Until blank line, item doesn't need indentation\n                itemContents += '\\n' + line;\n              } else {\n                // Otherwise, improper indentation ends this item\n                break;\n              }\n\n              if (!blankLine && !line.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n            }\n          }\n\n          if (!list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          } // Check for task list items\n\n\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n\n          list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents\n          });\n          list.raw += raw;\n        } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n        list.items[list.items.length - 1].raw = raw.trimRight();\n        list.items[list.items.length - 1].text = itemContents.trimRight();\n        list.raw = list.raw.trimRight();\n        var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n        for (i = 0; i < l; i++) {\n          this.lexer.state.top = false;\n          list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n          var spacers = list.items[i].tokens.filter(function (t) {\n            return t.type === 'space';\n          });\n          var hasMultipleLineBreaks = spacers.every(function (t) {\n            var chars = t.raw.split('');\n            var lineBreaks = 0;\n\n            var _iterator = _createForOfIteratorHelper(chars),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var char = _step.value;\n\n                if (char === '\\n') {\n                  lineBreaks += 1;\n                }\n\n                if (lineBreaks > 1) {\n                  return true;\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            return false;\n          });\n\n          if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n            // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n            list.loose = true;\n            list.items[i].loose = true;\n          }\n        }\n\n        return list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'html',\n          raw: cap[0],\n          pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        };\n\n        if (this.options.sanitize) {\n          token.type = 'paragraph';\n          token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]);\n          token.tokens = [];\n          this.lexer.inline(token.text, token.tokens);\n        }\n\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n\n      if (cap) {\n        if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n        var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        return {\n          type: 'def',\n          tag: tag,\n          raw: cap[0],\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var cap = this.rules.block.table.exec(src);\n\n      if (cap) {\n        var item = {\n          type: 'table',\n          header: splitCells(cap[1]).map(function (c) {\n            return {\n              text: c\n            };\n          }),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n        };\n\n        if (item.header.length === item.align.length) {\n          item.raw = cap[0];\n          var l = item.align.length;\n          var i, j, k, row;\n\n          for (i = 0; i < l; i++) {\n            if (/^ *-+: *$/.test(item.align[i])) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(item.align[i])) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(item.align[i])) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n\n          l = item.rows.length;\n\n          for (i = 0; i < l; i++) {\n            item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n              return {\n                text: c\n              };\n            });\n          } // parse child tokens inside headers and cells\n          // header child tokens\n\n\n          l = item.header.length;\n\n          for (j = 0; j < l; j++) {\n            item.header[j].tokens = [];\n            this.lexer.inline(item.header[j].text, item.header[j].tokens);\n          } // cell child tokens\n\n\n          l = item.rows.length;\n\n          for (j = 0; j < l; j++) {\n            row = item.rows[j];\n\n            for (k = 0; k < row.length; k++) {\n              row[k].tokens = [];\n              this.lexer.inline(row[k].text, row[k].tokens);\n            }\n          }\n\n          return item;\n        }\n      }\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'paragraph',\n          raw: cap[0],\n          text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n\n      if (cap) {\n        var token = {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: []\n        };\n        this.lexer.inline(token.text, token.tokens);\n        return token;\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: _escape(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n\n        return {\n          type: this.options.sanitize ? 'text' : 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          } // ending angle bracket cannot be escaped\n\n\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n\n        var href = cap[2];\n        var title = '';\n\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n          if (link) {\n            href = link[1];\n            title = link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n\n        href = href.trim();\n\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n          title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        link = links[link.toLowerCase()];\n\n        if (!link || !link.href) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n\n        return outputLink(cap, link, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrong.lDelim.exec(src);\n      if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/)) return;\n      var nextChar = match[1] || match[2] || '';\n\n      if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n        var lLength = match[0].length - 1;\n        var rDelim,\n            rLength,\n            delimTotal = lLength,\n            midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n        endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n\n          rLength = rDelim.length;\n\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***\n\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = src.slice(1, lLength + match.index + rLength);\n\n            return {\n              type: 'em',\n              raw: src.slice(0, lLength + match.index + rLength + 1),\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text, [])\n            };\n          } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n          var text = src.slice(2, lLength + match.index + rLength - 1);\n          return {\n            type: 'strong',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text: text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n\n        text = _escape(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2], [])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src, mangle) {\n      var cap = this.rules.inline.autolink.exec(src);\n\n      if (cap) {\n        var text, href;\n\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = _escape(cap[1]);\n          href = text;\n        }\n\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src, mangle) {\n      var cap;\n\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n\n        if (cap[2] === '@') {\n          text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n\n          do {\n            prevCapZero = cap[0];\n            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n          } while (prevCapZero !== cap[0]);\n\n          text = _escape(cap[0]);\n\n          if (cap[1] === 'www.') {\n            href = 'http://' + text;\n          } else {\n            href = text;\n          }\n        }\n\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src, smartypants) {\n      var cap = this.rules.inline.text.exec(src);\n\n      if (cap) {\n        var text;\n\n        if (this.lexer.state.inRawBlock) {\n          text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];\n        } else {\n          text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n        }\n\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }]);\n\n  return Tokenizer;\n}();\n/**\n * Block-Level Grammar\n */\n\n\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n});\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n}; // list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\n\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * smartypants text replacement\n * @param {string} text\n */\n\nfunction smartypants(text) {\n  return text // em-dashes\n  .replace(/---/g, \"\\u2014\") // en-dashes\n  .replace(/--/g, \"\\u2013\") // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\") // closing singles & apostrophes\n  .replace(/'/g, \"\\u2019\") // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\") // closing doubles\n  .replace(/\"/g, \"\\u201D\") // ellipses\n  .replace(/\\.{3}/g, \"\\u2026\");\n}\n/**\n * mangle email addresses\n * @param {string} text\n */\n\n\nfunction mangle(text) {\n  var out = '',\n      i,\n      ch;\n  var l = text.length;\n\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n/**\n * Block Lexer\n */\n\n\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(options) {\n    _classCallCheck(this, Lexer);\n\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  _createClass(Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n');\n      this.blockTokens(src, this.tokens);\n      var next;\n\n      while (next = this.inlineQueue.shift()) {\n        this.inlineTokens(next.src, next.tokens);\n      }\n\n      return this.tokens;\n    }\n    /**\n     * Lexing\n     */\n\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this = this;\n\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n          return leading + '    '.repeat(tabs.length);\n        });\n      }\n\n      var token, lastToken, cutSrc, lastParagraphClipped;\n\n      while (src) {\n        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n\n          return false;\n        })) {\n          continue;\n        } // newline\n\n\n        if (token = this.tokenizer.space(src)) {\n          src = src.substring(token.raw.length);\n\n          if (token.raw.length === 1 && tokens.length > 0) {\n            // if there's a single \\n as a spacer, it's terminating the last line,\n            // so move it there so that we don't get unecessary paragraph tags\n            tokens[tokens.length - 1].raw += '\\n';\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // code\n\n\n        if (token = this.tokenizer.code(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // fences\n\n\n        if (token = this.tokenizer.fences(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // heading\n\n\n        if (token = this.tokenizer.heading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // hr\n\n\n        if (token = this.tokenizer.hr(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // blockquote\n\n\n        if (token = this.tokenizer.blockquote(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // list\n\n\n        if (token = this.tokenizer.list(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // html\n\n\n        if (token = this.tokenizer.html(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // def\n\n\n        if (token = this.tokenizer.def(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.raw;\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else if (!this.tokens.links[token.tag]) {\n            this.tokens.links[token.tag] = {\n              href: token.href,\n              title: token.title\n            };\n          }\n\n          continue;\n        } // table (gfm)\n\n\n        if (token = this.tokenizer.table(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // lheading\n\n\n        if (token = this.tokenizer.lheading(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // top-level paragraph\n        // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n        cutSrc = src;\n\n        if (this.options.extensions && this.options.extensions.startBlock) {\n          (function () {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart = void 0;\n\n            _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: this\n              }, tempSrc);\n\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          })();\n        }\n\n        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastParagraphClipped && lastToken.type === 'paragraph') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          lastParagraphClipped = cutSrc.length !== src.length;\n          src = src.substring(token.raw.length);\n          continue;\n        } // text\n\n\n        if (token = this.tokenizer.text(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += '\\n' + token.raw;\n            lastToken.text += '\\n' + token.text;\n            this.inlineQueue.pop();\n            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        }\n\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src, tokens) {\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n    }\n    /**\n     * Lexing/Compiling\n     */\n\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this2 = this;\n\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar; // Mask out reflinks\n\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      } // Mask out other blocks\n\n\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      } // Mask out escaped em & strong delimiters\n\n\n      while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      }\n\n      while (src) {\n        if (!keepPrevChar) {\n          prevChar = '';\n        }\n\n        keepPrevChar = false; // extensions\n\n        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {\n          if (token = extTokenizer.call({\n            lexer: _this2\n          }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n\n          return false;\n        })) {\n          continue;\n        } // escape\n\n\n        if (token = this.tokenizer.escape(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // tag\n\n\n        if (token = this.tokenizer.tag(src)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // link\n\n\n        if (token = this.tokenizer.link(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // reflink, nolink\n\n\n        if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n          src = src.substring(token.raw.length);\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        } // em & strong\n\n\n        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // code\n\n\n        if (token = this.tokenizer.codespan(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // br\n\n\n        if (token = this.tokenizer.br(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // del (gfm)\n\n\n        if (token = this.tokenizer.del(src)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // autolink\n\n\n        if (token = this.tokenizer.autolink(src, mangle)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // url (gfm)\n\n\n        if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          continue;\n        } // text\n        // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n        cutSrc = src;\n\n        if (this.options.extensions && this.options.extensions.startInline) {\n          (function () {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart = void 0;\n\n            _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: this\n              }, tempSrc);\n\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          })();\n        }\n\n        if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n          src = src.substring(token.raw.length);\n\n          if (token.raw.slice(-1) !== '_') {\n            // Track prevChar before string of ____ started\n            prevChar = token.raw.slice(-1);\n          }\n\n          keepPrevChar = true;\n          lastToken = tokens[tokens.length - 1];\n\n          if (lastToken && lastToken.type === 'text') {\n            lastToken.raw += token.raw;\n            lastToken.text += token.text;\n          } else {\n            tokens.push(token);\n          }\n\n          continue;\n        }\n\n        if (src) {\n          var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n          if (this.options.silent) {\n            console.error(errMsg);\n            break;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n\n  return Lexer;\n}();\n/**\n * Renderer\n */\n\n\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer(options) {\n    _classCallCheck(this, Renderer);\n\n    this.options = options || defaults;\n  }\n\n  _createClass(Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var lang = (infostring || '').match(/\\S*/)[0];\n\n      if (this.options.highlight) {\n        var out = this.options.highlight(_code, lang);\n\n        if (out != null && out !== _code) {\n          escaped = true;\n          _code = out;\n        }\n      }\n\n      _code = _code.replace(/\\n$/, '') + '\\n';\n\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n      }\n\n      return '<pre><code class=\"' + this.options.langPrefix + _escape(lang, true) + '\">' + (escaped ? _code : _escape(_code, true)) + '</code></pre>\\n';\n    }\n    /**\n     * @param {string} quote\n     */\n\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return \"<blockquote>\\n\".concat(quote, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html) {\n      return _html;\n    }\n    /**\n     * @param {string} text\n     * @param {string} level\n     * @param {string} raw\n     * @param {any} slugger\n     */\n\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw, slugger) {\n      if (this.options.headerIds) {\n        var id = this.options.headerPrefix + slugger.slug(raw);\n        return \"<h\".concat(level, \" id=\\\"\").concat(id, \"\\\">\").concat(text, \"</h\").concat(level, \">\\n\");\n      } // ignore IDs\n\n\n      return \"<h\".concat(level, \">\").concat(text, \"</h\").concat(level, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    /**\n     * @param {string} text\n     */\n\n  }, {\n    key: \"listitem\",\n    value: function listitem(text) {\n      return \"<li>\".concat(text, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n    }\n    /**\n     * @param {string} text\n     */\n\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return \"<p>\".concat(text, \"</p>\\n\");\n    }\n    /**\n     * @param {string} header\n     * @param {string} body\n     */\n\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n    /**\n     * @param {string} content\n     */\n\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return \"<tr>\\n\".concat(content, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? \"<\".concat(type, \" align=\\\"\").concat(flags.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n    /**\n     * span level renderer\n     * @param {string} text\n     */\n\n  }, {\n    key: \"strong\",\n    value: function strong(text) {\n      return \"<strong>\".concat(text, \"</strong>\");\n    }\n    /**\n     * @param {string} text\n     */\n\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return \"<em>\".concat(text, \"</em>\");\n    }\n    /**\n     * @param {string} text\n     */\n\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return \"<code>\".concat(text, \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return this.options.xhtml ? '<br/>' : '<br>';\n    }\n    /**\n     * @param {string} text\n     */\n\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return \"<del>\".concat(text, \"</del>\");\n    }\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = '<a href=\"' + _escape(href) + '\"';\n\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n\n      out += '>' + text + '</a>';\n      return out;\n    }\n    /**\n     * @param {string} href\n     * @param {string} title\n     * @param {string} text\n     */\n\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n      if (href === null) {\n        return text;\n      }\n\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n\n      if (title) {\n        out += \" title=\\\"\".concat(title, \"\\\"\");\n      }\n\n      out += this.options.xhtml ? '/>' : '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text2) {\n      return _text2;\n    }\n  }]);\n\n  return Renderer;\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nvar TextRenderer = /*#__PURE__*/function () {\n  function TextRenderer() {\n    _classCallCheck(this, TextRenderer);\n  }\n\n  _createClass(TextRenderer, [{\n    key: \"strong\",\n    value: // no need for block level renderers\n    function strong(text) {\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(text) {\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text3) {\n      return _text3;\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n\n  return TextRenderer;\n}();\n/**\n * Slugger generates header id\n */\n\n\nvar Slugger = /*#__PURE__*/function () {\n  function Slugger() {\n    _classCallCheck(this, Slugger);\n\n    this.seen = {};\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  _createClass(Slugger, [{\n    key: \"serialize\",\n    value: function serialize(value) {\n      return value.toLowerCase().trim() // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n    }\n    /**\n     * Finds the next safe (unique) slug to use\n     * @param {string} originalSlug\n     * @param {boolean} isDryRun\n     */\n\n  }, {\n    key: \"getNextSafeSlug\",\n    value: function getNextSafeSlug(originalSlug, isDryRun) {\n      var slug = originalSlug;\n      var occurenceAccumulator = 0;\n\n      if (this.seen.hasOwnProperty(slug)) {\n        occurenceAccumulator = this.seen[originalSlug];\n\n        do {\n          occurenceAccumulator++;\n          slug = originalSlug + '-' + occurenceAccumulator;\n        } while (this.seen.hasOwnProperty(slug));\n      }\n\n      if (!isDryRun) {\n        this.seen[originalSlug] = occurenceAccumulator;\n        this.seen[slug] = 0;\n      }\n\n      return slug;\n    }\n    /**\n     * Convert string to unique id\n     * @param {object} [options]\n     * @param {boolean} [options.dryrun] Generates the next unique slug without\n     * updating the internal accumulator.\n     */\n\n  }, {\n    key: \"slug\",\n    value: function slug(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var slug = this.serialize(value);\n      return this.getNextSafeSlug(slug, options.dryrun);\n    }\n  }]);\n\n  return Slugger;\n}();\n/**\n * Parsing & Compiling\n */\n\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(options) {\n    _classCallCheck(this, Parser);\n\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '',\n          i,\n          j,\n          k,\n          l2,\n          l3,\n          row,\n          cell,\n          header,\n          body,\n          token,\n          ordered,\n          start,\n          loose,\n          itemBody,\n          item,\n          checked,\n          task,\n          checkbox,\n          ret;\n      var l = tokens.length;\n\n      for (i = 0; i < l; i++) {\n        token = tokens[i]; // Run any renderer extensions\n\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n\n          case 'heading':\n            {\n              out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n              continue;\n            }\n\n          case 'code':\n            {\n              out += this.renderer.code(token.text, token.lang, token.escaped);\n              continue;\n            }\n\n          case 'table':\n            {\n              header = ''; // header\n\n              cell = '';\n              l2 = token.header.length;\n\n              for (j = 0; j < l2; j++) {\n                cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                  header: true,\n                  align: token.align[j]\n                });\n              }\n\n              header += this.renderer.tablerow(cell);\n              body = '';\n              l2 = token.rows.length;\n\n              for (j = 0; j < l2; j++) {\n                row = token.rows[j];\n                cell = '';\n                l3 = row.length;\n\n                for (k = 0; k < l3; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: token.align[k]\n                  });\n                }\n\n                body += this.renderer.tablerow(cell);\n              }\n\n              out += this.renderer.table(header, body);\n              continue;\n            }\n\n          case 'blockquote':\n            {\n              body = this.parse(token.tokens);\n              out += this.renderer.blockquote(body);\n              continue;\n            }\n\n          case 'list':\n            {\n              ordered = token.ordered;\n              start = token.start;\n              loose = token.loose;\n              l2 = token.items.length;\n              body = '';\n\n              for (j = 0; j < l2; j++) {\n                item = token.items[j];\n                checked = item.checked;\n                task = item.task;\n                itemBody = '';\n\n                if (item.task) {\n                  checkbox = this.renderer.checkbox(checked);\n\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox;\n                  }\n                }\n\n                itemBody += this.parse(item.tokens, loose);\n                body += this.renderer.listitem(itemBody, task, checked);\n              }\n\n              out += this.renderer.list(body, ordered, start);\n              continue;\n            }\n\n          case 'html':\n            {\n              // TODO parse inline content if parameter markdown=1\n              out += this.renderer.html(token.text);\n              continue;\n            }\n\n          case 'paragraph':\n            {\n              out += this.renderer.paragraph(this.parseInline(token.tokens));\n              continue;\n            }\n\n          case 'text':\n            {\n              body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n              while (i + 1 < l && tokens[i + 1].type === 'text') {\n                token = tokens[++i];\n                body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n              }\n\n              out += top ? this.renderer.paragraph(body) : body;\n              continue;\n            }\n\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '',\n          i,\n          token,\n          ret;\n      var l = tokens.length;\n\n      for (i = 0; i < l; i++) {\n        token = tokens[i]; // Run any renderer extensions\n\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n\n        switch (token.type) {\n          case 'escape':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n\n          case 'html':\n            {\n              out += renderer.html(token.text);\n              break;\n            }\n\n          case 'link':\n            {\n              out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'image':\n            {\n              out += renderer.image(token.href, token.title, token.text);\n              break;\n            }\n\n          case 'strong':\n            {\n              out += renderer.strong(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'em':\n            {\n              out += renderer.em(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'codespan':\n            {\n              out += renderer.codespan(token.text);\n              break;\n            }\n\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n\n          case 'del':\n            {\n              out += renderer.del(this.parseInline(token.tokens, renderer));\n              break;\n            }\n\n          case 'text':\n            {\n              out += renderer.text(token.text);\n              break;\n            }\n\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n              if (this.options.silent) {\n                console.error(errMsg);\n                return;\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n\n  return Parser;\n}();\n/**\n * Marked\n */\n\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    var highlight = opt.highlight;\n    var tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    var done = function done(err) {\n      var out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    var pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(function () {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    var _tokens = Lexer.lex(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(_tokens, opt.walkTokens);\n    }\n\n    return Parser.parse(_tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + _escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n}\n/**\n * Options\n */\n\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var opts = merge.apply(void 0, [{}].concat(args));\n  var extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  var hasExtensions;\n  args.forEach(function (pack) {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach(function (ext) {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n\n        if (ext.renderer) {\n          // Renderer extensions\n          var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n\n              var ret = ext.renderer.apply(this, args);\n\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    } // ==-- Parse \"overwrite\" extensions --== //\n\n\n    if (pack.renderer) {\n      (function () {\n        var renderer = marked.defaults.renderer || new Renderer();\n\n        var _loop = function _loop(prop) {\n          var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n          renderer[prop] = function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            var ret = pack.renderer[prop].apply(renderer, args);\n\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n\n            return ret;\n          };\n        };\n\n        for (var prop in pack.renderer) {\n          _loop(prop);\n        }\n\n        opts.renderer = renderer;\n      })();\n    }\n\n    if (pack.tokenizer) {\n      (function () {\n        var tokenizer = marked.defaults.tokenizer || new Tokenizer();\n\n        var _loop2 = function _loop2(prop) {\n          var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n          tokenizer[prop] = function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n\n            var ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n\n            return ret;\n          };\n        };\n\n        for (var prop in pack.tokenizer) {\n          _loop2(prop);\n        }\n\n        opts.tokenizer = tokenizer;\n      })();\n    } // ==-- Parse WalkTokens extensions --== //\n\n\n    if (pack.walkTokens) {\n      var _walkTokens = marked.defaults.walkTokens;\n\n      opts.walkTokens = function (token) {\n        pack.walkTokens.call(this, token);\n\n        if (_walkTokens) {\n          _walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  var _iterator2 = _createForOfIteratorHelper(tokens),\n      _step2;\n\n  try {\n    var _loop3 = function _loop3() {\n      var token = _step2.value;\n      callback.call(marked, token);\n\n      switch (token.type) {\n        case 'table':\n          {\n            var _iterator3 = _createForOfIteratorHelper(token.header),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var cell = _step3.value;\n                marked.walkTokens(cell.tokens, callback);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            var _iterator4 = _createForOfIteratorHelper(token.rows),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var row = _step4.value;\n\n                var _iterator5 = _createForOfIteratorHelper(row),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _cell = _step5.value;\n                    marked.walkTokens(_cell.tokens, callback);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            break;\n          }\n\n        case 'list':\n          {\n            marked.walkTokens(token.items, callback);\n            break;\n          }\n\n        default:\n          {\n            if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n              // Walk any extensions\n              marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n                marked.walkTokens(token[childTokens], callback);\n              });\n            } else if (token.tokens) {\n              marked.walkTokens(token.tokens, callback);\n            }\n          }\n      }\n    };\n\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop3();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\n/**\n * Parse Inline\n * @param {string} src\n */\n\n\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    var tokens = Lexer.lexInline(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + _escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n};\n/**\n * Expose\n */\n\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = Parser.parse;\nvar lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","options","src","rules","block","newline","code","codeBlockStyle","fences","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","_escapes","links","reflink","nolink","maskedSrc","prevChar","emStrong","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","next","leading","tabs","repeat","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","space","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","codespan","startInline","inlineText","lex","Renderer","infostring","quote","slugger","id","slug","body","startatt","content","flags","TextRenderer","Slugger","seen","value","originalSlug","isDryRun","occurenceAccumulator","serialize","getNextSafeSlug","dryrun","Parser","textRenderer","l2","l3","cell","itemBody","checkbox","ret","renderers","parser","parseInline","tablecell","tablerow","parse","unshift","listitem","image","marked","callback","done","err","pending","setTimeout","message","setOptions","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","lexInline"],"sources":["/Users/itsjotab/Desktop/FCC-projects/markdown-text/markdown-text-fcc/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inline(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inline(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}